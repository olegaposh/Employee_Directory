{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/ResultList/ResultList.js","components/SearchContainer/SearchContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","className","Search","props","Row","Col","xs","md","sm","lg","Form","Group","controlId","Control","name","type","placeholder","value","search","onChange","handleInputChange","ResultList","formatDate","d","date","Date","getMonth","getDate","getFullYear","data","columns","label","field","sort","width","rows","results","map","item","Image","src","picture","thumbnail","Name","first","last","Phone","cell","Email","email","dob","responsive","striped","bordered","small","searching","SearchContainer","searchUser","a","axios","get","URL","result","setState","console","log","event","target","state","this","filteredSearch","filter","toLowerCase","includes","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAceA,EAVA,WACX,OAEI,kBAACC,EAAA,EAAD,CAAWC,UAAU,yBACjB,wBAAIA,UAAU,gCAAd,wB,yFCyBGC,EA1BA,SAACC,GAGZ,OAKI,kBAACC,EAAA,EAAD,CAAKH,UAAU,0BACX,kBAACI,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,IAAGC,GAAG,IAAIC,GAAG,KACxB,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,cAClB,kBAACF,EAAA,EAAKG,QAAN,CAAcZ,UAAU,YACpBa,KAAK,SACLC,KAAK,OACLC,YAAY,SACZC,MAAOd,EAAMe,OACbC,SAAUhB,EAAMiB,wB,QC6CzBC,G,MAhEI,SAAClB,GAEpB,IAAMmB,EAAa,SAACC,GAElB,IAAIC,EAAO,IAAIC,KAAKF,GACpB,OAASC,EAAKE,WAAa,EAAMF,EAAKE,WAAa,EAAM,KAAOF,EAAKE,WAAa,IAAO,KAAQF,EAAKG,UAAY,EAAKH,EAAKG,UAAa,IAAMH,EAAKG,WAAc,IAAMH,EAAKI,eAIvKC,EAAO,CACXC,QAAS,CACP,CACEC,MAAO,GACPC,MAAO,QACPC,KAAM,YAER,CACEF,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,WACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,WACNC,MAAO,KAET,CACEH,MAAO,gBACPC,MAAO,MACPC,KAAM,WACNC,MAAO,MAGXC,KAAMhC,EAAMiC,QAAQC,KAAI,SAAAC,GAAI,MAC1B,CACMC,MAAO,yBAAKC,IAAG,UAAKF,EAAKG,QAAQC,aACjCC,KAAK,GAAD,OAAKL,EAAKxB,KAAK8B,MAAf,YAAwBN,EAAKxB,KAAK+B,MACtCC,MAAOR,EAAKS,KACZC,MAAOV,EAAKW,MACZC,IAAK5B,EAAWgB,EAAKY,IAAI1B,WAKnC,OACE,kBAAC,IAAD,CAAcvB,UAAU,cACxBkD,YAAU,EACRC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,WAAW,EACX1B,KAAMA,M,iBCkBG2B,E,kDA1EX,WAAYrD,GAAQ,IAAD,8BACf,cAAMA,IAUVsD,WAXmB,sBAWN,4BAAAC,EAAA,+EAGgBC,IAAMC,IAAI,EAAKC,KAH/B,OAGCC,EAHD,OAML,EAAKC,SAAS,CAAE3B,QAAS0B,EAAOjC,KAAKO,UANhC,gDAUL4B,QAAQC,IAAR,MAVK,yDAXM,EAyBnB7C,kBAAoB,SAAA8C,GAAU,IAAD,EAEDA,EAAMC,OAAtBrD,EAFiB,EAEjBA,KAAMG,EAFW,EAEXA,MAEd,EAAK8C,SAAL,eACKjD,EAAOG,KA3BZ,EAAKmD,MAAQ,CACTlD,OAAQ,GACRkB,QAAS,IAEb,EAAKyB,IAAM,wCAPI,E,gEAoCfQ,KAAKZ,e,+BAOC,IAAD,OAECa,EAAiBD,KAAKD,MAAMhC,QAAQmC,QAAO,SAAC1C,GAE9C,MAA0B,KAAtB,EAAKuC,MAAMlD,QAENW,EAAKf,KAAK8B,MAAM4B,cAAcC,SAAS,EAAKL,MAAMlD,OAAOsD,gBAEzD3C,EAAKf,KAAK+B,KAAK2B,cAAcC,SAAS,EAAKL,MAAMlD,OAAOsD,eAHtD3C,OAGN,KAOT,OACI,oCAEI,kBAAC,EAAD,CACIX,OAAQmD,KAAKD,MAAMlD,OACnBE,kBAAmBiD,KAAKjD,oBAE5B,kBAAC,EAAD,CAAYgB,QAASkC,S,GAnEPI,a,iBCafC,MATf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.4acd4c90.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\n\nconst Header = () => {\n    return (\n\n        <Jumbotron className=\"bg-primary text-white\"> \n            <h1 className=\"text-center font-weight-bold\">Employee Directory</h1>\n        </Jumbotron>\n    )\n\n}\n\nexport default Header;","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\n\n\n\nconst Search = (props) => {\n\n\n    return (\n\n        \n\n\n        <Row className=\"justify-content-center\">\n            <Col xs=\"6\" md=\"4\"sm=\"6\" lg=\"3\">\n                <Form.Group controlId=\"formSearch\">\n                    <Form.Control className=\"shadow-sm\"\n                        name=\"search\"\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        value={props.search}\n                        onChange={props.handleInputChange} \n                        />\n                </Form.Group>\n            </Col>\n        </Row>\n    )\n}\n\n\n\nexport default Search;","import React from 'react';\nimport { MDBDataTable } from 'mdbreact';\nimport \"./ResultList.css\"\n\nconst ResultList = (props) => {\n  \nconst formatDate = (d) => {\n\n  var date = new Date(d);\n  return(((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear());\n\n}\n\n  const data = {\n    columns: [\n      {\n        label: '',\n        field: 'Image',\n        sort: 'disabled'\n      },\n      {\n        label: 'Name',\n        field: 'Name',\n        sort: 'asc',\n        width: 270\n      },\n      {\n        label: 'Phone',\n        field: 'Phone',\n        sort: 'disabled',\n        width: 200\n      },\n      {\n        label: 'Email',\n        field: 'Email',\n        sort: 'disabled',\n        width: 100\n      },\n      {\n        label: 'Date of Birth',\n        field: 'dob',\n        sort: 'disabled',\n        width: 150\n      }\n    ],\n    rows: props.results.map(item => (\n      {\n            Image: <img src={`${item.picture.thumbnail}`}></img>,\n            Name: `${item.name.first} ${item.name.last}`,\n            Phone: item.cell,\n            Email: item.email,\n            dob: formatDate(item.dob.date)\n      }\n    ))\n  };\n\n  return (\n    <MDBDataTable className=\"text-center\"\n    responsive\n      striped\n      bordered\n      small\n      searching={false}\n      data={data}\n    />\n  );\n}\n\nexport default ResultList;\n\n\n// import React from 'react';\n// import './ResultList.css'\n// import Image from 'react-bootstrap/Image'\n// import Table from 'react-bootstrap/Table'\n\n\n\n// const ResultList = (props) => {\n\n\n// const formatDate = (d) => {\n\n//   var date = new Date(d);\n//   return(((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear());\n\n// }\n  \n//   if (props.results.length > 0) {\n//     // console.log(props.results[0].id.value)\n//     // console.log(props.results[0].picture.thumbnail)\n//     // console.log(props.results[0].name.first)\n//     // console.log(props.results[0].cell)\n//     // console.log(props.results[0].email)\n//     // console.log(props.results[0])\n//   }\n  \n//   return (\n//     <>\n//     <Table striped bordered hover>\n//       <thead>\n//         <tr class=\"black white-text\">\n//           <th>Image</th>\n//           <th>Name</th>\n//           <th>Phone</th>\n//           <th>Email</th>\n//           <th>DOB</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n\n//           {props.results.map(item =>\n//           (<tr key={item.phone}> \n//             <td><Image className=\"img\" src={item.picture.thumbnail} thumbnail /></td>\n//             <td>{item.name.first} {item.name.last}</td>\n//             <td>{item.cell}</td>\n//             <td>{item.email}</td>\n//             <td>{formatDate(item.dob.date)}</td>\n//           </tr>))} \n\n//       </tbody>\n//     </Table>\n\n\n\n\n// </>\n//   )\n\n// }\n\n// export default ResultList;","import React, { Component } from 'react';\nimport Search from '../Search/Search'\nimport ResultList from '../ResultList/ResultList'\nimport axios from 'axios'\n\nclass SearchContainer extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: \"\",\n            results: []\n        }\n        this.URL = \"https://randomuser.me/api/?results=50\";\n\n    }\n\n    searchUser = async () => {\n\n        try {\n            const result = await axios.get(this.URL)\n            // update the state of results\n            \n            this.setState({ results: result.data.results })\n\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    handleInputChange = event => {\n\n        const { name, value } = event.target\n        // console.log(event.target.name)\n        this.setState({\n            [name]: value\n        })\n    }\n\n    componentDidMount() {\n\n        this.searchUser();\n    }\n\n\n\n\n\n    render() {\n\n        const filteredSearch = this.state.results.filter((data) => {\n\n            if (this.state.search === \"\")\n                return data\n            else if (data.name.first.toLowerCase().includes(this.state.search.toLowerCase()))\n                return data\n            else if (data.name.last.toLowerCase().includes(this.state.search.toLowerCase()))\n                return data\n            \n\n\n        })\n        \n        return (\n            <>\n                \n                <Search\n                    search={this.state.search}\n                    handleInputChange={this.handleInputChange}\n                />\n                <ResultList results={filteredSearch} />\n\n            </>\n\n        )\n\n    }\n}\n\nexport default SearchContainer;","import React from 'react';\nimport Header from './components/Header/Header';\nimport SearchContainer from './components/SearchContainer/SearchContainer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n\n\n\n\nfunction App() {\n  return (\n    <Container>\n      <Header />\n      <SearchContainer />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}